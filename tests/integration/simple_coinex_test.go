package main

import (
	"database/sql"
	"log"
	"time"

	"daemon-go/internal/db"
	"daemon-go/internal/exchange"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Exchange –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
	exchangeConfig := db.Exchange{
		ID:           1,
		Name:         "CoinEx",
		Active:       true,
		Url:          "https://api.coinex.com",
		BaseUrl:      "https://api.coinex.com",
		WebsocketUrl: sql.NullString{String: "wss://socket.coinex.com/", Valid: true},
		WsUrl:        sql.NullString{String: "wss://socket.coinex.com/", Valid: true},
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ CoinEx
	adapter := exchange.NewCoinexAdapter(exchangeConfig)

	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ CoinEx...")

	// –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–µ—Ä–∞
	log.Printf("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–∞–ø—Ç–µ—Ä—É...")
	if err := adapter.Start(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: %v", err)
	}

	log.Printf("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	time.Sleep(2 * time.Second)

	// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
	log.Printf("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BTCUSDT...")

	// –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏
	log.Printf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π...")

	if err := adapter.SubscribeMarkets([]string{"BTCUSDT"}, "spot", 10); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	} else {
		log.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
	}

	// –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	log.Printf("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 10 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(10 * time.Second)

	log.Printf("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
}
