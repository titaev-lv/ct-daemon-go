package main

import (
	"database/sql"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"daemon-go/internal/bus"
	"daemon-go/internal/config"
	"daemon-go/internal/db"
	"daemon-go/internal/exchange"
	"daemon-go/internal/market"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	debugConfig := &config.Config{
		OrderBook: struct {
			DebugLogRaw bool
			DebugLogMsg bool
		}{
			DebugLogRaw: true,
			DebugLogMsg: true,
		},
	}
	exchange.SetOrderBookConfig(debugConfig)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è message bus
	messageBus := bus.GetInstance()

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	messageChannel := messageBus.Subscribe("htx", 100)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		for msg := range messageChannel {
			switch msg.MessageType {
			case market.MessageTypeOrderBook:
				if orderBook, ok := msg.Data.(*market.UnifiedOrderBook); ok {
					log.Printf("üìä ORDER BOOK [%s] %s - %s: bids=%d, asks=%d",
						msg.Exchange, msg.Symbol, orderBook.UpdateType,
						len(orderBook.Bids), len(orderBook.Asks))
				}

			case market.MessageTypeTicker:
				if ticker, ok := msg.Data.(*market.UnifiedTicker); ok {
					log.Printf("üí∞ TICKER [%s] %s: price=%.8f, volume=%.2f",
						msg.Exchange, msg.Symbol, ticker.LastPrice, ticker.Volume24h)
				}

			default:
				log.Printf("üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s %s %s", msg.Exchange, msg.Symbol, msg.MessageType)
			}
		}
	}()

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Exchange –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞ HTX
	exchangeConfig := db.Exchange{
		ID:           1,
		Name:         "HTX",
		Active:       true,
		Url:          "https://api.huobi.pro",
		BaseUrl:      "https://api.huobi.pro",
		WebsocketUrl: sql.NullString{String: "wss://api.huobi.pro/ws", Valid: true},
		WsUrl:        sql.NullString{String: "wss://api.huobi.pro/ws", Valid: true},
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ HTX
	adapter := exchange.NewHtxAdapter(exchangeConfig)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	testSymbols := []string{
		"BTCUSDT", // Bitcoin
		"ETHUSDT", // Ethereum
		"XRPUSDT", // Ripple
	}

	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ HTX...")
	log.Printf("üìà –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", strings.Join(testSymbols, ", "))
	log.Printf("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: debug_log_raw=%v, debug_log_msg=%v",
		debugConfig.OrderBook.DebugLogRaw, debugConfig.OrderBook.DebugLogMsg)
	log.Printf("üîî –í–ê–ñ–ù–û: HTX —Å–∞–º–∞ —à–ª–µ—Ç ping'–∏, WriteLoop –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è!")

	// –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–µ—Ä–∞
	go func() {
		if err := adapter.Start(); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: %v", err)
		}
	}()

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	time.Sleep(3 * time.Second)

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
	log.Printf("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
	for _, symbol := range testSymbols {
		if err := adapter.SubscribeMarkets([]string{symbol}, "spot", 0); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ %s: %v", symbol, err)
		} else {
			log.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", symbol)
		}
		time.Sleep(500 * time.Millisecond)
	}

	// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
	go func() {
		time.Sleep(30 * time.Second)
		log.Printf("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤...")

		for _, symbol := range testSymbols[:1] { // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
			if err := adapter.UnsubscribeMarkets([]string{symbol}, "spot", 0); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç %s: %v", symbol, err)
			} else {
				log.Printf("üîá –û—Ç–ø–∏—Å–∫–∞ –æ—Ç %s –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", symbol)
			}
			time.Sleep(500 * time.Millisecond)
		}
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	log.Printf("üèÉ –ê–¥–∞–ø—Ç–µ—Ä HTX –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	log.Printf("üìä –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ order book –∏ ticker...")

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan

	log.Printf("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞...")

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
	time.Sleep(2 * time.Second)
	log.Printf("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}